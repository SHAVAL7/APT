/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package flexibleml;

import static flexibleml.SpatiotemporalPatterns.metadata;
import static flexibleml.TestingDataset.testingdataset;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;

/**
 *
 * @author SEABIRDS-PC
 */
public class FlexibleBC extends javax.swing.JFrame {

    /**
     * Creates new form FlexibleBC
     */
    public FlexibleBC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 51));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Flexible BC for Cyberattack Detection");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(64, 64, 64)
                .addComponent(jLabel1)
                .addContainerGap(67, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Flexible Bayes classifiers for Cyberattack detection");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("SVM Classification");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 817, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
                    
        jTextArea1.append("===================================================================================\n");
        jTextArea1.append("                  Spatiotemporal Patterns for Testing Dataset\n");
        jTextArea1.append("===================================================================================\n");
        
        String sk[]=testingdataset.trim().split("\n");                         
        
        ArrayList norep=new ArrayList();
        for(int i1=0;i1<sk.length;i1++)
        {
            String st[]=sk[i1].trim().split("-");
            if(!(norep.contains(st[0].trim())))
            {
                norep.add(st[0].trim());
            }
            if(!(norep.contains(st[1].trim())))
            {
                norep.add(st[1].trim());
            }
        }
        System.out.println("\nVertices: "+norep);
        
        int i, j;
        int numberOfVertices = norep.size();
        int numberOfEdges = sk.length;
        int[][] adjacency_matrix = new int[numberOfEdges][numberOfEdges];
        int[][] degree_matrix = new int[numberOfEdges][numberOfEdges];
        int[][] laplacian_matrix = new int[numberOfEdges][numberOfEdges];
        Graph g = new Graph(numberOfVertices, numberOfEdges);

        // Adding edges with source and destination
        for(int i1=0;i1<sk.length;i1++)
        {
            String st[]=sk[i1].trim().split("-");
            g.edge[i1].src = Integer.parseInt(st[0].trim());
            g.edge[i1].dest = Integer.parseInt(st[1].trim());
        }
        // Adjacency Matrix
        for (i = 0; i < numberOfEdges; i++) {
                for (j = 0; j < numberOfEdges; j++) {
                        adjacency_matrix[g.edge[i].src]
                                                        [g.edge[i].dest]
                                = 1;
                        adjacency_matrix[g.edge[i].dest]
                                                        [g.edge[i].src]
                                = 1;
                }
        }
        System.out.println("Adjacency matrix : ");
        for (i = 1; i < adjacency_matrix.length; i++) {
            for (j = 1; j < adjacency_matrix[i].length;
                    j++) {
                    System.out.print(adjacency_matrix[i][j]
                                                    + " ");
            }
            System.out.println();
        }
        System.out.println("\n");

        // Degree Matrix
        for (i = 0; i < numberOfEdges; i++) {
            for (j = 0; j < numberOfEdges; j++) {
                    degree_matrix[i][i]
                            += adjacency_matrix[i][j];
            }
        }
        System.out.println("Degree matrix : ");
        for (i = 1; i < degree_matrix.length; i++) {
            for (j = 1; j < degree_matrix[i].length; j++) {
                    System.out.print(degree_matrix[i][j] + " ");
            }
            System.out.println();
        }
        System.out.println("\n");

        // Laplacian Matrix
        System.out.println("Laplacian matrix : ");
        for (i = 0; i < numberOfEdges; i++) {
            for (j = 0; j < numberOfEdges; j++) {
                    laplacian_matrix[i][j]
                            = degree_matrix[i][j]
                            - adjacency_matrix[i][j];
            }
        }
        int a=0;
        String ro="";
        for (i = 1; i < laplacian_matrix.length; i++) {
            String co="";
            for (j = 1; j < laplacian_matrix[i].length;
                    j++) {
                    System.out.printf("%2d",
                                                    laplacian_matrix[i][j]);
                    System.out.printf("%s", " ");
                    co=co+laplacian_matrix[i][j]+",";
            }
            System.out.println();            
            ro=ro+co.trim()+"?"+"\n";
        }
        String rt[]=ro.split("\n");
        String at[]=rt[0].trim().split(",");
        String he="";
        for(int ic=0;ic<at.length-1;ic++)
        {
            he=he+"F"+(ic+1)+",";
        }
        he=he+"Class";
        String data=ro.substring(0,ro.lastIndexOf('\n'));
        String dataset=he+"\n"+data;
        jTextArea1.append(dataset.trim()+"\n");                
               
        String testingdataset=metadata.trim().replaceAll("Training", "Testing")+"\n"+data.trim();        
        fileWrite("TestingDataset.arff",testingdataset);                
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        SVMClassification mf=new SVMClassification();
        mf.setTitle("SVM Classification");
        mf.setVisible(true);
        mf.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlexibleBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlexibleBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlexibleBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlexibleBC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlexibleBC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void fileWrite(String filename, String content) {        
        try
        {
            File fe=new File(filename);
            String sg=content;
            FileOutputStream fos=new FileOutputStream(fe);
            fos.write(sg.getBytes());
            fos.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    class Graph 
    {
	class Edge 
        {
            int src, dest;
	}
	int vertices, edges;
	Edge[] edge;

	Graph(int vertices, int edges)
	{
            this.vertices = vertices;
            this.edges = edges;
            edge = new Edge[edges];
            for (int i = 0; i < edges; i++) 
            {
                edge[i] = new Edge();
            }
	}
    }
}
